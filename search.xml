<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2022/09/11/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="lang-bash">$ hexo new &quot;My New Post&quot;
</code></pre>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="lang-bash">$ hexo server
</code></pre>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="lang-bash">$ hexo generate
</code></pre>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="lang-bash">$ hexo deploy
</code></pre>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>添加网页BGM全局吸底效果及踩坑过程</title>
    <url>/2023/06/05/hexo-init1/</url>
    <content><![CDATA[<p>总体思路：</p>
<ol>
<li>采用<a href="https://aplayer.js.org/#/">Aplayer</a></li>
<li>hexo-tag-aplayer插件也能用，警告其中支持的metingjs的网易云api是经常挂掉ψ(*｀ー´)ψ(至少我配置那段时间网易云api是挂了),该方法参考<a href="https://butterfly.js.org/posts/507c070f/">Butterfly添加全局吸底Aplayer教程</a></li>
<li>在官网下载源码：<a href="https://github.com/MoePlayer/APlayer">MoePlayer/APlayer</a></li>
<li>上述源码只需取dist文件夹，将其解压至<code>Hexo\themes\你的主题\source中</code></li>
<li>新建<code>Hexo\themes\你的主题\source\dist\music.js</code></li>
</ol>
<p>内容为（参考）</p>
<pre><code class="lang-js">const ap = new APlayer(&#123;
  container: document.getElementById(&#39;aplayer&#39;),
  fixed: true,
  order: &#39;random&#39;,
  autoplay: true,
  audio: [
    &#123;
      name: &quot;千年之羽（符华印象曲）&quot;,
      artist: &#39;小林未郁&#39;,
      url: &#39;http://parodist1225.top/static/music/小林未郁-千年之羽.mp3&#39;,
      cover: &#39;http://parodist1225.top/static/music/千年之羽.jpg&#39;,
    &#125;,
    &#123;
      name: &#39;Moon Halo&#39;,
      artist: &#39;茶理理,TetraCalyx,Hanser&#39;,
      url: &#39;http://parodist1225.top/static/music/MoonHalo.mp3&#39;,
      cover: &#39;http://192.168.111.242:8081/IXP46078c365a6cfdefa7c28f4479e73221179b16fae0c64_10.11.178.133/p1.music.126.net/ciLKATqflV2YWSV3ltE2Kw==/109951166159281275.jpg?param=130y130&#39;,
    &#125;,
    &#123;
      name: &#39;Scarborough Fair&#39;,
      artist: &#39;山田タマル&#39;,
      url: &#39;http://music.163.com/song/media/outer/url?id=489970551.mp3&#39;,
      cover: &#39;https://p1.music.126.net/PFu_Fb_sYULwkoJ87mHDmA==/19023750184014421.jpg?param=90y90&#39;,
    &#125;,
    &#123;
      name: &#39;I Really Want to Stay at Your House&#39;,
      artist: &#39;Samuel Kim / Lorien&#39;,
      url: &#39;http://music.163.com/song/media/outer/url?id=1990743306.mp3&#39;,
      cover: &#39;https://p2.music.126.net/-LHyMtXmo-yDf-eqwb8ThA==/109951168143056350.jpg?param=90y90&#39;,
    &#125;,
  ]
&#125;);
</code></pre>
<p>url如网易云样式<code>http://music.163.com/song/media/outer/url?id=歌曲ID.mp3</code></p>
<p>更多参数参考上述官方文档<a href="https://aplayer.js.org/#/">Aplayer</a></p>
<ol>
<li>这一步来实现全网页的添加，思路是将下列代码添加至博客每个页面底部<br>以Butterfly主题为例，取该主题_config.butterfly.yml文件中inject部分，将下列四行代码始终挂载在各页面底部<pre><code class="lang-yml">inject:
head:
 # - &lt;link rel=&quot;stylesheet&quot; href=&quot;/xxx.css&quot;&gt;
bottom:
 #- &lt;div class=&quot;aplayer no-destroy&quot; data-id=&quot;60198&quot; data-server=&quot;netease&quot; data-type=&quot;playlist&quot; data-fixed=&quot;true&quot; data-autoplay=&quot;true&quot;&gt; &lt;/div&gt;
 -  &lt;link rel=&quot;stylesheet&quot; href=&quot;/dist/APlayer.min.css&quot;&gt;
 -  &lt;div id=&quot;aplayer&quot;&gt;&lt;/div&gt;
 -  &lt;script type=&quot;text/javascript&quot; src=&quot;/dist/APlayer.min.js&quot;&gt;&lt;/script&gt;
 -  &lt;script type=&quot;text/javascript&quot; src=&quot;/dist/music.js&quot;&gt;&lt;/script&gt;
</code></pre>
</li>
</ol>
]]></content>
      <tags>
        <tag>hexo建设</tag>
      </tags>
  </entry>
  <entry>
    <title>解决hexo-asset-image插件Bug:引用本地资源后路径中出现/.io/或者/.com/</title>
    <url>/2023/06/04/hexo-bug1/</url>
    <content><![CDATA[<p>问题描述：在上传文章中用markdown语法如<code>![](img.jpg)</code>时在实际网站中GET的路径自行被添加/.io/导致获取不到该图片</p>
<p>解决方法：打开\blog(根目录)\node_modules\hexo-asset-image\index.js，将原第24行<br><code>var endPos = link.lastIndexOf(&#39;.&#39;);</code>改为<code>var endPos = link.length-1;</code></p>

    <div id="aplayer-ipiAxqgG" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="60198" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"></div>
]]></content>
      <tags>
        <tag>Debug</tag>
      </tags>
  </entry>
  <entry>
    <title>TS(一)</title>
    <url>/2022/09/15/test/</url>
    <content><![CDATA[<h1 id="typescript与Javascript"><a href="#typescript与Javascript" class="headerlink" title="typescript与Javascript"></a>typescript与Javascript</h1><p>js是动态类型弱类型语言，而ts是静态类型弱类型语言。<br>强类型语言：不允许改变变量的数据类型，除非进行强制类型转换。如python<br>弱类型语言：变量可以被赋予不同的值。<br>静态类型语言：在编译阶段确定所有变量的类型。<br>动态类型语言：在执行阶段确定所有变量的类型。</p>
<h2 id="ts的数据类型"><a href="#ts的数据类型" class="headerlink" title="ts的数据类型"></a>ts的数据类型</h2><p>ts的数据类型有两种，一种是js原有的数据类型，一种是新增的数据类型<br><strong>原有数据类型</strong><br>原始类型：number/string/bollean/null/undefined/symbol<br>对象类型：object（数组、对象、函数等）<br>js写法:</p>
<pre><code class="lang-js">let a = &#39;hhh&#39;
let b = 666
let c = true
let d = null
let e = undefined
let f = &#123;name:&#39;maobuhui&#39;&#125;
let g = 100
let h = Symbol()
</code></pre>
<p>ts写法:</p>
<pre><code class="lang-ts">let a:string = &#39;hhh&#39;
let b:number = 666
let c:boolean = true
let d:null = null
let e:undefined = undefined
let f:object = &#123;name:&#39;maobuhui&#39;&#125;
let g:bigint = 100n
let h:symbol = Symbol()
</code></pre>
<p><strong>新增类型</strong></p>
<ol>
<li>联合类型</li>
<li>自定义类型(类型别名)</li>
<li>接口</li>
<li>元组</li>
<li>字面量类型</li>
<li>枚举</li>
<li>void</li>
<li>any<br>对象类型(接口 interface)<br>```js<br>interface IByteDancer{<br> /<em>只读属性：约束属性不可在对象初始化外赋值</em>/<br> readonly jobId:number;<br> name:string;<br> sex:’man’|’woman’|’other’;<br> age:number;<br> /<em>可选属性：定义该属性可以不存在</em>/<br> hobby?:string;<br> /<em>任意属性：约束所有对象属性必须是该属性的子类型</em>/</li>
</ol>
<pre><code>[key:string]:any;
</code></pre><p>}<br>const bytedancer: IBytedancer = {<br>    jobId:9303245,<br>    name: ‘lin’,<br>    sex: ‘man’,<br>    age: 28,<br>    hobby: ‘swimming’<br>}</p>
<pre><code>函数类型
```ts
function add(x:number,y:number):number&#123;
    return x+y;
&#125;
const mult:(x:number,y:number) =&gt; number = (x,y) =&gt; x*y;
</code></pre><p>函数重载</p>
<pre><code class="lang-ts">/*对getDate函数进行重载，timestamp为可缺省参数*/
function getDate(type:&#39;string&#39;, timestamp?: string) :string;
function getDate (type:&#39;date&#39; ,timestamp?: string): Date;
function getDate(type: &#39;string&#39; | &#39;date&#39;, timestamp?: string): Date | string &#123;
const date = new Date(timestamp); 
return type === &#39;string&#39; ? date.toLocaleString() : date;
&#125;
const X = getDate( &#39;date&#39;); // x: Date
const y = getDate(&#39;string&#39;, &#39;2018-01-10&#39;); // y: string

interface IGetDate &#123;
(type :&#39;string&#39;, timestamp?: string): string;
(type :&#39;date&#39; , timestamp?: string): Date ;
(type : &#39;string&#39; | &#39;date&#39;,timestamp?: string): Date | string; 
&#125;
/*不能将类型“(type:any, timestamp: any) =&gt; string | Date&quot; 分配给类型&quot;IGetDate&quot;。
不能将类型&quot;string | Date&quot; 分配给类型&quot;string&quot;。
不能将类型&quot;Date&quot;分配给类型&quot;string&quot;。ts (2322) */
const getDate2: IGetDate = (type, timestamp) =&gt; &#123;
const date = new Date( timestamp ) ;
return type === &#39;string&#39; ? date. toLocaleString() : date;
&#125;
</code></pre>
<p>数组类型</p>
<pre><code class="lang-ts">/*
「类型+方括号」表示*/
type IArr1 = number[];
/*泛型表示 */
type IArr2 = Array&lt;string|number| Record&lt;string, number&gt;&gt;;
/*元祖表示*/
type IArr3 = [number, number, string, string] ;
/*接口表示*/
interface IArr4 &#123;
[key: number]: any;
&#125;
const arr1: IArr1 = [1 , 2, 3, 4, 5, 6];
const arr2: IArr2 = [1 , 2, &#39;3&#39;, &#39;4&#39;,&#123;a:1&#125;];
const arr3: IArr3 = [1, 2, &#39;3&#39;, &#39;4&#39;];
const arr4: IArr4 = [&#39;string&#39;, () =&gt; null, &#123;&#125;, []];
</code></pre>
<p>ts补充类型</p>
<pre><code class="lang-ts">/*空类型，表示无赋值*/
type IEmptyFunction = () =&gt; void;
/*任意类型，是所有类型的子类型*/ 
type IAnyType = any ;
/*枚举类型:支持枚举值到枚举名的正、反向映射*/
enum EnumExample &#123;
    add = &#39;+&#39;,
    mult = &#39;*&#39;
&#125;
EnumExample[&#39;add&#39;] === &#39;+&#39;;
EnumExample[&#39;+&#39;] === &#39;add&#39; ;
enum ECorlor &#123; Mon, Tue, Wed, Thu, Fri, Sat, Sun &#125;;
ECorlor[&#39;Mon&#39;] === 0;
ECorlor[0] === &#39;Mon&#39; ;
/*泛型*/
type INumArr = Array&lt;number&gt;;
</code></pre>
]]></content>
  </entry>
  <entry>
    <title>神经网络入门1</title>
    <url>/2023/06/03/networkbase1/</url>
    <content><![CDATA[<p>原文出处<a href="https://victorzhou.com/blog/intro-to-neural-networks/">Machine Learning for Beginners: An Introduction to Neural Networks</a></p>
<h4 id="砖块：神经元"><a href="#砖块：神经元" class="headerlink" title="砖块：神经元"></a>砖块：神经元</h4><p>神经网络的基本单位，神经元。神经元接受输入，对其做一些数据操作，然后产生输出。例如，这是一个2-输入神经元：<br><img src="/2023/06/03/networkbase1/perceptron.svg" alt><br>这里发生了三个事情。首先，每个输入都跟一个权重相乘（红色）：</p>
<script type="math/tex; mode=display">
x_1→x_1*w_1 \\
x_2→x_2*w_2</script><p>然后，加权后的输入求和，加上一个偏差b（绿色）：</p>
<script type="math/tex; mode=display">
(x_1*w_1)+(x_2*w_2)+b</script><p>最后，这个结果传递给一个激活函数f：</p>
<script type="math/tex; mode=display">
y=f(x_1*w_1+x_2*w_2+b)</script><p>激活函数的用途是将一个无边界的输入，转变成一个可预测的形式。常用的激活函数就就是S型函数：<br><img src="/2023/06/03/networkbase1/sigmoid.webp" alt><br>S型函数的值域是$(0, 1)$。简单来说，就是把$(−∞, +∞)$压缩到$(0, 1)$ ，很大的负数约等于$0$，很大的正数约等于$1$。</p>
<h4 id="一个简单的例子"><a href="#一个简单的例子" class="headerlink" title="一个简单的例子"></a>一个简单的例子</h4><p>假设我们有一个2-输入神经元，激活函数就是S型函数，其参数如下：</p>
<script type="math/tex; mode=display">
w=[0,1] \\
b=4</script><p>$w=[0,1]$就是以向量的形式表示$w_1=0, w_2=1$。现在，我们给这个神经元一个输入$x=[2, 3]$。我们用点积来表示：</p>
<p><img src="/2023/06/03/networkbase1/l1.png" alt></p>
<p>当输入是[2, 3]时，这个神经元的输出是0.999。给定输入，得到输出的过程被称为前馈（feedforward）。</p>
<h4 id="编码一个神经元"><a href="#编码一个神经元" class="headerlink" title="编码一个神经元"></a>编码一个神经元</h4><p>让我们来实现一个神经元！用Python的NumPy库来完成其中的数学计算：</p>
<pre><code class="lang-py">import numpy as np

def sigmoid(x):
  # Our activation function: f(x) = 1 / (1 + e^(-x))
  return 1 / (1 + np.exp(-x))

class Neuron:
  def __init__(self, weights, bias):
    self.weights = weights
    self.bias = bias

  def feedforward(self, inputs):
    # Weight inputs, add bias, then use the activation function
    total = np.dot(self.weights, inputs) + self.bias
    return sigmoid(total)

weights = np.array([0, 1]) # w1 = 0, w2 = 1
bias = 4                   # b = 4
n = Neuron(weights, bias)

x = np.array([2, 3])       # x1 = 2, x2 = 3
print(n.feedforward(x))    # 0.9990889488055994
</code></pre>
<p>还记得这个数字吗？就是我们前面算出来的例子中的0.999。</p>
<h3 id="把神经元组装成网络"><a href="#把神经元组装成网络" class="headerlink" title="把神经元组装成网络"></a>把神经元组装成网络</h3><p>所谓的神经网络就是一堆神经元。这就是一个简单的神经网络：<br><img src="/2023/06/03/networkbase1/network.svg" alt><br>这个网络有两个输入，一个有两个神经元（$h_1$和$h_2$）的隐藏层，以及一个有一个神经元（$o_1$）的输出层。要注意,$o_1$的输入就是 $h_1$和 $h_2$的输出，这样就组成了一个网络。</p>
<blockquote>
<p>隐藏层就是输入层和输出层之间的层，隐藏层可以是多层的。</p>
</blockquote>
<h4 id="例子：前馈"><a href="#例子：前馈" class="headerlink" title="例子：前馈"></a>例子：前馈</h4><p>我们继续用前面图中的网络，假设每个神经元的权重都是$w=[0,1]$ ，截距项也相同 $b=0$，激活函数也都是S型函数。分别用<br> $h_1,h_2,o_1$表示相应的神经元的输出。</p>
<p>当输入$x=[2,3]$时，会得到什么结果？<br><img src="/2023/06/03/networkbase1/l2.png" alt><br>这个神经网络对输入[2,3]的输出是0.7216，很简单。</p>
<p>一个神经网络的层数以及每一层中的神经元数量都是任意的。基本逻辑都一样：输入在神经网络中向前传输，最终得到输出。接下来，我们会继续使用前面的这个网络。</p>
<h4 id="编码神经网络：前馈"><a href="#编码神经网络：前馈" class="headerlink" title="编码神经网络：前馈"></a>编码神经网络：前馈</h4><p>接下来我们实现这个神经网络的前馈机制，还是这个图：<br><img src="/2023/06/03/networkbase1/network1.svg" alt></p>
<pre><code class="lang-py">import numpy as np

# ... code from previous section here

class OurNeuralNetwork:
  &#39;&#39;&#39;
  A neural network with:
    - 2 inputs
    - a hidden layer with 2 neurons (h1, h2)
    - an output layer with 1 neuron (o1)
  Each neuron has the same weights and bias:
    - w = [0, 1]
    - b = 0
  &#39;&#39;&#39;
  def __init__(self):
    weights = np.array([0, 1])
    bias = 0

    # The Neuron class here is from the previous section
    self.h1 = Neuron(weights, bias)
    self.h2 = Neuron(weights, bias)
    self.o1 = Neuron(weights, bias)

  def feedforward(self, x):
    out_h1 = self.h1.feedforward(x)
    out_h2 = self.h2.feedforward(x)

    # The inputs for o1 are the outputs from h1 and h2
    out_o1 = self.o1.feedforward(np.array([out_h1, out_h2]))

    return out_o1

network = OurNeuralNetwork()
x = np.array([2, 3])
print(network.feedforward(x)) # 0.7216325609518421
</code></pre>
<p>We got 0.7216 again! Looks like it works.</p>
<h3 id="训练神经网络，第1部分"><a href="#训练神经网络，第1部分" class="headerlink" title="训练神经网络，第1部分"></a>训练神经网络，第1部分</h3><p>现在有这样的数据：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>Name</th>
<th>Weight(lb)</th>
<th>Height(in)</th>
<th>Gender</th>
</tr>
</thead>
<tbody>
<tr>
<td>Alice</td>
<td>133</td>
<td>65</td>
<td>F</td>
</tr>
<tr>
<td>Bob</td>
<td>160</td>
<td>72</td>
<td>M</td>
</tr>
<tr>
<td>Charlie</td>
<td>152</td>
<td>70</td>
<td>M</td>
</tr>
<tr>
<td>Diana</td>
<td>120</td>
<td>60</td>
<td>F</td>
</tr>
</tbody>
</table>
</div>
<p>接下来我们用这个数据来训练神经网络的权重和截距项，从而可以根据身高体重预测性别：<br><img src="/2023/06/03/networkbase1/network2.svg" alt><br>我们用0和1分别表示男性（M）和女性（F），并对数值做了转化：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>Name</th>
<th>Weight(minus 135)</th>
<th>Height(minus 66)</th>
<th>Gender</th>
</tr>
</thead>
<tbody>
<tr>
<td>Alice</td>
<td>-2</td>
<td>-1</td>
<td>1</td>
</tr>
<tr>
<td>Bob</td>
<td>25</td>
<td>6</td>
<td>0</td>
</tr>
<tr>
<td>Charlie</td>
<td>17</td>
<td>4</td>
<td>0</td>
</tr>
<tr>
<td>Diana</td>
<td>-15</td>
<td>-6</td>
<td>1</td>
</tr>
</tbody>
</table>
</div>
<blockquote>
<p>我这里是随意选取了135和66来标准化数据，通常会使用平均值。</p>
</blockquote>
<h4 id="损失"><a href="#损失" class="headerlink" title="损失"></a>损失</h4><p>在训练网络之前，我们需要量化当前的网络是『好』还是『坏』，从而可以寻找更好的网络。这就是定义<strong>损失</strong>的目的。</p>
<p>我们在这里用平均方差（MSE）损失：<br>$MSE=\frac{1}{n}\sum_{i=1}^{n} (y_{true}-y_{pred})^2$<br> 让我们仔细看看：</p>
<ul>
<li>n是样品数，这里等于4（Alice、Bob、Charlie和Diana）。</li>
<li>y表示要预测的变量，这里是性别。</li>
<li>$y_{true}$ 是变量的真实值（『正确答案』）。例如，Alice的$y_{true}$ 就是1（男性）。</li>
<li>$y_{pred}$ 是变量的预测值。这就是我们网络的输出。</li>
</ul>
<p>$(y_{true}-y_{pred})^2$被称为方差（squared error）。我们的损失函数就是所有方差的平均值。预测效果于浩，损失就越少。<br>更好的预测 = 更少的损失！<br>训练网络 = 最小化它的损失。</p>
<h4 id="损失计算例子"><a href="#损失计算例子" class="headerlink" title="损失计算例子"></a>损失计算例子</h4><p>假设我们的网络总是输出0，换言之就是认为所有人都是男性。损失如何？🤔<br><img src="/2023/06/03/networkbase1/l3.png" alt></p>
<h4 id="代码：MSE损失"><a href="#代码：MSE损失" class="headerlink" title="代码：MSE损失"></a>代码：MSE损失</h4><p>下面是计算MSE损失的代码：</p>
<pre><code class="lang-py">import numpy as np

def mse_loss(y_true, y_pred):
  # y_true and y_pred are numpy arrays of the same length.
  return ((y_true - y_pred) ** 2).mean()

y_true = np.array([1, 0, 0, 1])
y_pred = np.array([0, 0, 0, 0])

print(mse_loss(y_true, y_pred)) # 0.5
</code></pre>
<blockquote>
<p>如果你不理解这段代码，可以看看NumPy的<a href="https://numpy.org/doc/stable/user/quickstart.html#basic-operations">快速入门</a>中关于数组的操作。</p>
</blockquote>
<p>Nice. Onwards!</p>
<h3 id="训练神经网络，第2部分"><a href="#训练神经网络，第2部分" class="headerlink" title="训练神经网络，第2部分"></a>训练神经网络，第2部分</h3><p>现在我们有了一个明确的目标：最小化神经网络的损失。通过调整网络的权重和截距项，我们可以改变其预测结果，但如何才能逐步地减少损失？</p>
<blockquote>
<p>这一段内容涉及到多元微积分，如果不熟悉微积分的话，可以跳过这些数学内容。</p>
</blockquote>
<p>为了简化问题，假设我们的数据集中只有Alice：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>Name</th>
<th>Weight(minus 135)</th>
<th>Height(minus 66)</th>
<th>Gender</th>
</tr>
</thead>
<tbody>
<tr>
<td>Alice</td>
<td>-2</td>
<td>-1</td>
<td>1</td>
</tr>
<tr>
<td>Name</td>
<td>$y_{true}$</td>
<td>$y_{pred}$</td>
<td>$(y_{true}-y_{pred})^2$</td>
</tr>
<tr>
<td>Alice</td>
<td>1</td>
<td>0</td>
<td>1</td>
</tr>
</tbody>
</table>
</div>
<p>那均方差损失就只是Alice的方差：<br>$MSE=\frac{1}{1}\sum_{i=1}^{1} (y_{true}-y_{pred})^2 \\<br>\quad \quad= (y_{true}-y_{pred})^2 \\<br>\quad \quad= (1-y_{pred})^2$<br>也可以把损失看成是权重和截距项的函数。让我们给网络标上权重和截距项：<br><img src="/2023/06/03/networkbase1/network3%20(1" alt>.svg)<br>这样我们就可以把网络的损失表示为：</p>
<script type="math/tex; mode=display">L(w_1,w_2,w_3,w_4,w_5,w_6,b_1,b_2,b_3)</script><p>假设我们要优化 $w_1$，当我们改变$w_1$时，损失 $L$ 会怎么变化？可以用 $ \frac{\partial L}{\partial w_1}$来回答这个问题，怎么计算？</p>
<blockquote>
<p>接下来的数据稍微有点复杂，别担心，准备好纸和笔。</p>
</blockquote>
<p>首先，让我们用 $ \frac{\partial y_{pred}}{\partial w_1}$来改写这个偏导数：<br><img src="/2023/06/03/networkbase1/l4.png" alt><br><img src="/2023/06/03/networkbase1/l5.png" alt><br>这种计算偏导的方法叫『反向传播算法』(backpropagation)。</p>
<p>好多数学符号，如果你还没搞明白的话，我们来看一个实际例子。</p>
<h4 id="例子：计算偏导数"><a href="#例子：计算偏导数" class="headerlink" title="例子：计算偏导数"></a>例子：计算偏导数</h4><p>我们还是看数据集中只有Alice的情况:</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>Name</th>
<th>Weight(minus 135)</th>
<th>Height(minus 66)</th>
<th>Gender</th>
</tr>
</thead>
<tbody>
<tr>
<td>Alice</td>
<td>-2</td>
<td>-1</td>
<td>1</td>
</tr>
<tr>
<td>Name</td>
<td>$y_{true}$</td>
<td>$y_{pred}$</td>
<td>$(y_{true}-y_{pred})^2$</td>
</tr>
<tr>
<td>Alice</td>
<td>1</td>
<td>0</td>
<td>1</td>
</tr>
</tbody>
</table>
</div>
<p>把所有的权重和截距项都分别初始化为1和0。在网络中做前馈计算：<br><img src="/2023/06/03/networkbase1/l6.png" alt><br><img src="/2023/06/03/networkbase1/l7.png" alt></p>
<h4 id="训练：随机梯度下降"><a href="#训练：随机梯度下降" class="headerlink" title="训练：随机梯度下降"></a>训练：随机梯度下降</h4><p>现在训练神经网络已经万事俱备了！我们会使用名为随机梯度下降法的优化算法来优化网络的权重和截距项，实现损失的最小化。核心就是这个更新等式：</p>
<script type="math/tex; mode=display">w_1←w_1-η\frac{\partial L}{\partial w_1}</script><p> η是一个常数，被称为学习率，用于调整训练的速度。我们要做的就是用$w_1$ 减去$η\frac{\partial L}{\partial w_1}$ ：</p>
<ul>
<li>如果 $\frac{\partial L}{\partial w_1}$是正数，$w_1$ 会变小，$L$ 会下降。</li>
<li>如果 $\frac{\partial L}{\partial w_1}$是负数，$w_1$ 会变大，$L$ 会下降。<br>如果我们对网络中的每个权重和截距项都这样进行优化，损失就会不断下降，网络性能会不断上升。</li>
</ul>
<p>我们的训练过程是这样的：</p>
<ol>
<li>从我们的数据集中选择一个样本，用随机梯度下降法进行优化——每次我们都只针对一个样本进行优化； </li>
<li>计算每个权重或截距项对损失的偏导（例如 $\frac{\partial L}{\partial w_1}$ 、 $\frac{\partial L}{\partial w_2}$ 等）； </li>
<li>用更新等式更新每个权重和截距项； </li>
<li>重复第一步；</li>
</ol>
<h3 id="代码：一个完整的神经网络"><a href="#代码：一个完整的神经网络" class="headerlink" title="代码：一个完整的神经网络"></a>代码：一个完整的神经网络</h3><p>我们终于可以实现一个完整的神经网络了：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>Name</th>
<th>Weight(minus 135)</th>
<th>Height(minus 66)</th>
<th>Gender</th>
</tr>
</thead>
<tbody>
<tr>
<td>Alice</td>
<td>-2</td>
<td>-1</td>
<td>1</td>
</tr>
<tr>
<td>Bob</td>
<td>25</td>
<td>6</td>
<td>0</td>
</tr>
<tr>
<td>Charlie</td>
<td>17</td>
<td>4</td>
<td>0</td>
</tr>
<tr>
<td>Diana</td>
<td>-15</td>
<td>-6</td>
<td>1</td>
</tr>
</tbody>
</table>
</div>
<p><img src="/2023/06/03/networkbase1/network4.svg" alt></p>
<pre><code class="lang-py">import numpy as np

def sigmoid(x):
  # Sigmoid activation function: f(x) = 1 / (1 + e^(-x))
  return 1 / (1 + np.exp(-x))

def deriv_sigmoid(x):
  # Derivative of sigmoid: f&#39;(x) = f(x) * (1 - f(x))
  fx = sigmoid(x)
  return fx * (1 - fx)

def mse_loss(y_true, y_pred):
  # y_true and y_pred are numpy arrays of the same length.
  return ((y_true - y_pred) ** 2).mean()

class OurNeuralNetwork:
  &#39;&#39;&#39;
  A neural network with:
    - 2 inputs
    - a hidden layer with 2 neurons (h1, h2)
    - an output layer with 1 neuron (o1)

  *** DISCLAIMER ***:
  The code below is intended to be simple and educational, NOT optimal.
  Real neural net code looks nothing like this. DO NOT use this code.
  Instead, read/run it to understand how this specific network works.
  &#39;&#39;&#39;
  def __init__(self):
    # Weights
    self.w1 = np.random.normal()
    self.w2 = np.random.normal()
    self.w3 = np.random.normal()
    self.w4 = np.random.normal()
    self.w5 = np.random.normal()
    self.w6 = np.random.normal()

    # Biases
    self.b1 = np.random.normal()
    self.b2 = np.random.normal()
    self.b3 = np.random.normal()

  def feedforward(self, x):
    # x is a numpy array with 2 elements.
    h1 = sigmoid(self.w1 * x[0] + self.w2 * x[1] + self.b1)
    h2 = sigmoid(self.w3 * x[0] + self.w4 * x[1] + self.b2)
    o1 = sigmoid(self.w5 * h1 + self.w6 * h2 + self.b3)
    return o1

  def train(self, data, all_y_trues):
    &#39;&#39;&#39;
    - data is a (n x 2) numpy array, n = # of samples in the dataset.
    - all_y_trues is a numpy array with n elements.
      Elements in all_y_trues correspond to those in data.
    &#39;&#39;&#39;
    learn_rate = 0.1
    epochs = 1000 # number of times to loop through the entire dataset

    for epoch in range(epochs):
      for x, y_true in zip(data, all_y_trues):
        # --- Do a feedforward (we&#39;ll need these values later)
        sum_h1 = self.w1 * x[0] + self.w2 * x[1] + self.b1
        h1 = sigmoid(sum_h1)

        sum_h2 = self.w3 * x[0] + self.w4 * x[1] + self.b2
        h2 = sigmoid(sum_h2)

        sum_o1 = self.w5 * h1 + self.w6 * h2 + self.b3
        o1 = sigmoid(sum_o1)
        y_pred = o1

        # --- Calculate partial derivatives.
        # --- Naming: d_L_d_w1 represents &quot;partial L / partial w1&quot;
        d_L_d_ypred = -2 * (y_true - y_pred)

        # Neuron o1
        d_ypred_d_w5 = h1 * deriv_sigmoid(sum_o1)
        d_ypred_d_w6 = h2 * deriv_sigmoid(sum_o1)
        d_ypred_d_b3 = deriv_sigmoid(sum_o1)

        d_ypred_d_h1 = self.w5 * deriv_sigmoid(sum_o1)
        d_ypred_d_h2 = self.w6 * deriv_sigmoid(sum_o1)

        # Neuron h1
        d_h1_d_w1 = x[0] * deriv_sigmoid(sum_h1)
        d_h1_d_w2 = x[1] * deriv_sigmoid(sum_h1)
        d_h1_d_b1 = deriv_sigmoid(sum_h1)

        # Neuron h2
        d_h2_d_w3 = x[0] * deriv_sigmoid(sum_h2)
        d_h2_d_w4 = x[1] * deriv_sigmoid(sum_h2)
        d_h2_d_b2 = deriv_sigmoid(sum_h2)

        # --- Update weights and biases
        # Neuron h1
        self.w1 -= learn_rate * d_L_d_ypred * d_ypred_d_h1 * d_h1_d_w1
        self.w2 -= learn_rate * d_L_d_ypred * d_ypred_d_h1 * d_h1_d_w2
        self.b1 -= learn_rate * d_L_d_ypred * d_ypred_d_h1 * d_h1_d_b1

        # Neuron h2
        self.w3 -= learn_rate * d_L_d_ypred * d_ypred_d_h2 * d_h2_d_w3
        self.w4 -= learn_rate * d_L_d_ypred * d_ypred_d_h2 * d_h2_d_w4
        self.b2 -= learn_rate * d_L_d_ypred * d_ypred_d_h2 * d_h2_d_b2

        # Neuron o1
        self.w5 -= learn_rate * d_L_d_ypred * d_ypred_d_w5
        self.w6 -= learn_rate * d_L_d_ypred * d_ypred_d_w6
        self.b3 -= learn_rate * d_L_d_ypred * d_ypred_d_b3

      # --- Calculate total loss at the end of each epoch
      if epoch % 10 == 0:
        y_preds = np.apply_along_axis(self.feedforward, 1, data)
        loss = mse_loss(all_y_trues, y_preds)
        print(&quot;Epoch %d loss: %.3f&quot; % (epoch, loss))

# Define dataset
data = np.array([
  [-2, -1],  # Alice
  [25, 6],   # Bob
  [17, 4],   # Charlie
  [-15, -6], # Diana
])
all_y_trues = np.array([
  1, # Alice
  0, # Bob
  0, # Charlie
  1, # Diana
])

# Train our neural network!
network = OurNeuralNetwork()
network.train(data, all_y_trues)
</code></pre>
<blockquote>
<p>You can <a href="https://repl.it/@vzhou842/An-Introduction-to-Neural-Networks">run / play with this code yourself</a>. It’s also available on <a href="https://github.com/vzhou842/neural-network-from-scratch">Github</a>.</p>
</blockquote>
<p>随着网络的学习，损失在稳步下降。<br><img src="/2023/06/03/networkbase1/loss.webp" alt><br>现在我们可以用这个网络来预测性别了：</p>
<pre><code class="lang-py"># Make some predictions
emily = np.array([-7, -3]) # 128 pounds, 63 inches
frank = np.array([20, 2])  # 155 pounds, 68 inches
print(&quot;Emily: %.3f&quot; % network.feedforward(emily)) # 0.951 - F
print(&quot;Frank: %.3f&quot; % network.feedforward(frank)) # 0.039 - M
</code></pre>
<p>接下来？<br>搞定了一个简单的神经网络，快速回顾一下：</p>
<ul>
<li>介绍了神经网络的基本结构——神经元；</li>
<li>在神经元中使用S型激活函数；</li>
<li>神经网络就是连接在一起的神经元；</li>
<li>构建了一个数据集，输入（或特征）是体重和身高，输出（或标签）是性别；</li>
<li>学习了损失函数和均方差损失；</li>
<li>训练网络就是最小化其损失；</li>
<li>用反向传播方法计算偏导；</li>
<li>用随机梯度下降法训练网络；</li>
</ul>
<p>接下来你还可以：<br><a href="https://victorzhou.com/blog/intro-to-neural-networks/">跳转底部链接</a></p>
]]></content>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
</search>
